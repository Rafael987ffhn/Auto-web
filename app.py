import whisper
from gtts import gTTS
import subprocess
import os

# Fun√ß√£o para extrair √°udio do v√≠deo com ffmpeg
def extract_audio(video_path, audio_path):
    try:
        subprocess.run(["ffmpeg", "-i", video_path, "-q:a", "0", "-map", "a", audio_path, "-y"], check=True)
        print("üéß √Åudio extra√≠do com sucesso!")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao extrair √°udio: {e}")
        raise

# Fun√ß√£o para transcri√ß√£o de √°udio usando Whisper
def transcribe_audio(audio_path):
    try:
        model = whisper.load_model("base")
        result = model.transcribe(audio_path)
        return result["text"]
    except Exception as e:
        print(f"‚ùå Erro na transcri√ß√£o do √°udio: {e}")
        raise

# Fun√ß√£o para gerar √°udio dublado com gTTS
def generate_dubbed_audio(text, dubbed_audio_path):
    try:
        tts = gTTS(text=text, lang='pt-br')
        tts.save(dubbed_audio_path)
        print("üé§ √Åudio dublado gerado com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao gerar √°udio dublado: {e}")
        raise

# Fun√ß√£o para substituir o √°udio original pelo dublado no v√≠deo
def replace_audio_in_video(video_path, dubbed_audio_path, output_path):
    try:
        subprocess.run([
            "ffmpeg", "-i", video_path, "-i", dubbed_audio_path, "-c:v", "copy",
            "-map", "0:v:0", "-map", "1:a:0", "-shortest", output_path, "-y"
        ], check=True)
        print(f"üé¨ V√≠deo dublado salvo em: {output_path}")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao substituir √°udio no v√≠deo: {e}")
        raise

# Fun√ß√£o principal
def dub_video(video_path, audio_path, dubbed_audio_path, output_path):
    # 1. Extrair o √°udio do v√≠deo
    extract_audio(video_path, audio_path)
    
    # 2. Transcri√ß√£o com Whisper
    transcription = transcribe_audio(audio_path)
    print("üìù Transcri√ß√£o:", transcription)
    
    # 3. Gerar √°udio dublado com gTTS
    generate_dubbed_audio(transcription, dubbed_audio_path)
    
    # 4. Substituir √°udio original pelo dublado
    replace_audio_in_video(video_path, dubbed_audio_path, output_path)
    
    # 5. Limpeza de arquivos tempor√°rios
    os.remove(audio_path)
    os.remove(dubbed_audio_path)
    print("üßπ Arquivos tempor√°rios removidos com sucesso!")

# Caminhos dos arquivos
video_path = "video.mp4"
audio_path = "audio_original.wav"
dubbed_audio_path = "audio_dublado.mp3"
output_path = "video_dublado.mp4"

# Iniciar o processo de dublagem
dub_video(video_path, audio_path, dubbed_audio_path, output_path)
